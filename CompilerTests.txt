//Konstruktor Test mit Parameter
    /*public static void main(String[] args) {
        ArrayList<ClassDecl> classes = new ArrayList<>();
        classes.add(new ClassDecl("add", new ArrayList<>(), new ArrayList<>(), new ArrayList<>()));
        Program prog = new Program(classes);
        ClassDecl classDecl = prog.classes.get(0);

        Parameter parameter = new Parameter(BasicType.INT, "i");

        ArrayList<Parameter> parameters = new ArrayList<>();
        parameters.add(parameter);

        classDecl.constructors.add(new Constructor(new Block(), parameters,AccessModifier.PUBLIC));

        Program tast = generateTypedast(prog);
        System.out.println(tast);
    }*/

    //Class Fields
    /*public static void main(String[] args) {
            ArrayList<ClassDecl> classes = new ArrayList<>();
            classes.add(new ClassDecl("add", new ArrayList<>(), new ArrayList<>(), new ArrayList<>()));
            Program prog = new Program(classes);
            Field privateField = new Field(AccessModifier.PRIVATE, INT, "private");
            Field publicField = new Field(AccessModifier.PUBLIC, INT, "public");
            Field protectedField = new Field(AccessModifier.PROTECTED, INT, "protected");

            List<Field> fields = prog.classes.get(0).fields;
            fields.add(privateField);
            fields.add(publicField);
            fields.add(protectedField);
            Program tast = generateTypedast(prog);
    }*/

    public static void main(String[] args) {
        Program prog = new Program(new ArrayList<>(Arrays.asList(
                new ClassDecl("Test",
                        new ArrayList<Field>(Arrays.asList(new Field(INT, true, "i" , AccessModifier.PUBLIC, null))),
                        new ArrayList<Method>(),
                        new ArrayList<Constructor>(Arrays.asList(
                                new Constructor(
                                        new Block(
                                                new ArrayList<>(Arrays.asList(new Assign(new LocalOrFieldVar("i"), new IntExpr(5), null)))),
                                        new ArrayList<>(Arrays.asList(new Parameter(BasicType.CHAR, "param"))),
                                        AccessModifier.PUBLIC)))/*,
                                AccessModifier.PUBLIC*/))));
        Program tast = generateTypedast(prog);
    }

//This und Assign Test

            ArrayList<ClassDecl> classes = new ArrayList<>();
            classes.add(new ClassDecl("add", new ArrayList<>(), new ArrayList<>(), new ArrayList<>()));
            Program expectedAst = new Program(classes);

            FieldDecl i = new FieldDecl("i", AccessModifier.PUBLIC);
            i.setType(new BaseType(Primitives.INT));

            PrintableVector<FieldDecl> fields = expectedAst.getClasses().firstElement().getFieldDelcarations();
            fields.add(i);

            ClassDecl classDecl = expectedAst.getClasses().firstElement();

            Block block = getEmptyBlock();

            Assign assign = new Assign(new InstVar("i", new This()), new IntegerExpr(5));
            block.getStatements().add(assign);

            classDecl.getConstructorDeclarations().add(new ConstructorDecl(AccessModifier.PUBLIC, getParameters(), block));
Program tast = generateTypedast(expectedAst);