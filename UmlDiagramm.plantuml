@startuml

!theme plain
top to bottom direction
skinparam linetype ortho

class Assign {
  + Assign(): 
}
class Binary {
  + Binary(): 
}
class Block {
  + Block(): 
}
class BoolExpr {
  + BoolExpr(): 
}
class CharExpr {
  + CharExpr(): 
}
class ClassDecl {
  + ClassDecl(): 
}
class Expression {
  + Expression(): 
}
class Field {
  + Field(): 
}
class If {
  + If(): 
}
class InstVar {
  + InstVar(): 
}
class IntExpr {
  + IntExpr(): 
}
class JNull {
  + JNull(): 
}
class LocalOrFieldVar {
  + LocalOrFieldVar(): 
}
class LocalVarDecl {
  + LocalVarDecl(): 
}
class Method {
  + Method(): 
}
class MethodCall {
  + MethodCall(): 
}
class New {
  + New(): 
}
enum Operator << enumeration >> {
  + Operator(): 
  + valueOf(String): Operator
  + values(): Operator[]
}
class Parameter {
  + Parameter(): 
}
class Program {
  + Program(): 
}
class Return {
  + Return(): 
}
class Statement {
  + Statement(): 
}
class StatementExpression {
  + StatementExpression(): 
}
class StmtExpExp {
  + StmtExpExp(): 
}
class StmtExprStmt {
  + StmtExprStmt(): 
}
class Super {
  + Super(): 
}
class This {
  + This(): 
}
interface Type << interface >>
class Unary {
  + Unary(): 
}
class While {
  + While(): 
}

Assign              "1" *-[#595959,plain]-> "expression\n1" Expression          
Assign              "1" *-[#595959,plain]-> "operator\n1" Operator            
Assign               -[#000082,plain]-^  StatementExpression 
Binary              "1" *-[#595959,plain]-> "expression1\n1" Expression          
Binary              "1" *-[#595959,plain]-> "operator\n1" Operator            
Block                -[#000082,plain]-^  Statement           
Block               "1" *-[#595959,plain]-> "statements\n*" Statement           
BoolExpr             -[#000082,plain]-^  Expression          
CharExpr             -[#000082,plain]-^  Expression          
ClassDecl           "1" *-[#595959,plain]-> "fields\n*" Field               
ClassDecl           "1" *-[#595959,plain]-> "methods\n*" Method              
ClassDecl           "1" *-[#595959,plain]-> "type\n1" Type                
Field               "1" *-[#595959,plain]-> "type\n1" Type                
If                  "1" *-[#595959,plain]-> "statement1\n1" Statement           
InstVar             "1" *-[#595959,plain]-> "expression\n1" Expression          
InstVar              -[#000082,plain]-^  Expression          
IntExpr              -[#000082,plain]-^  Expression          
JNull                -[#000082,plain]-^  Expression          
LocalOrFieldVar      -[#000082,plain]-^  Expression          
LocalVarDecl         -[#000082,plain]-^  Statement           
LocalVarDecl        "1" *-[#595959,plain]-> "type\n1" Type                
Method              "1" *-[#595959,plain]-> "parameters\n*" Parameter           
Method              "1" *-[#595959,plain]-> "statement\n1" Statement           
Method              "1" *-[#595959,plain]-> "type\n1" Type                
MethodCall          "1" *-[#595959,plain]-> "expressions\n*" Expression          
MethodCall           -[#000082,plain]-^  StatementExpression 
New                 "1" *-[#595959,plain]-> "expressions\n*" Expression          
New                 "1" *-[#595959,plain]-> "type\n1" Type                
Parameter           "1" *-[#595959,plain]-> "type\n1" Type                
Program             "1" *-[#595959,plain]-> "classes\n*" ClassDecl           
Return              "1" *-[#595959,plain]-> "expression\n1" Expression          
Return               -[#000082,plain]-^  Statement           
StmtExpExp           -[#000082,plain]-^  Expression          
StmtExpExp          "1" *-[#595959,plain]-> "statementExpression\n1" StatementExpression 
StmtExprStmt         -[#000082,plain]-^  Statement           
StmtExprStmt        "1" *-[#595959,plain]-> "type\n1" Type                
Super                -[#000082,plain]-^  Expression          
This                 -[#000082,plain]-^  Expression          
Unary                -[#000082,plain]-^  Expression          
Unary               "1" *-[#595959,plain]-> "expression\n1" Expression          
Unary               "1" *-[#595959,plain]-> "operator\n1" Operator            
While               "1" *-[#595959,plain]-> "expression\n1" Expression          
While                -[#000082,plain]-^  Statement           
While               "1" *-[#595959,plain]-> "statement\n1" Statement           
@enduml
